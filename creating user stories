single Resource in this app called a Review so that we 
have something to CRUD
A Resource is an abstract object that we use to organize data, code, 
and the features of our app. 
For example, a User resource we can keep track of 
logging in and out, email and passwords, and people's birthdays. 
In a blog, we might have an Article or Post resource where we 
would track the titles and bodies of articles and keep 
track of the code for publishing and sharing them.

Users can view all reviews (index)
Users can create a review (new/create)
Users can view one review (show)
Users can delete a review (destroy)
Users can edit a review (edit/update)
Users can comment on reviews (comments#create)
Users can delete comments on reviews (comments#destroy)

URL	HTTP Verb	Action	What it Does
/	GET	index	See all reviews
/reviews/new	GET	new	See new review form
/reviews	POST	create	Create a new review
/reviews/:id	GET	show	See one review
/reviews/:id/edit	GET	edit	See an edit review form
/reviews/:id	PATCH/PUT	update	Update a review
/reviews/:id	DELETE	destroy	Delete a review

=====================
Database! Mongo!!

transmit data as json
Mongo DB allows you to save JS objects or Json as key value pairs.
--document based database!!
collection od reviews is a bunch of review style documents.
========================
server =node.js
web framework = Express.js
MongoDB ODM= Mongoose
data is represented as Java script objects BUT we can only save
it as Mongo DB documents 
 ODM object document mapper  map our JSobjects to MongoDB objects
---

In order to write and read data from your MongoDB database 
with Mongoose, you need to use what is called a Model 
The model is the Data Layer 

soo wrting the routes:
Review.find()
      .then(reviews => {
        res.render('reviews-index', { reviews: reviews });
      })
        .catch(err => {});


      Review= mane of the model
      .find() returns a promise...(a value that will ne provided 
      in the future)
      .then() when data comes back from the database , 
      provides a function
      .catch() in case promise id rejected

      Resourceful and RESTful architecture to our 
      MVC structured app--(MVC or the Model View Controller 
      architecture of web server development.)

=====================================
making a create Action
make a route to reviews/new and have it render a template

app.get('/reviews/new', (req, res) => {
  res.render('reviews-new', {});
})

Make the form and add a method POST and a action "/reviews"

now we need a route that detects posts requests to that path:
 /reviews

 app.post('/reviews', (req, res) => {
  console.log(req.body);
  // res.render('reviews-new', {});
})
==========================================
 instead of body parser now we need express....
in app.js

Body parser gives us: req object called req.body AND 
it contains the FORM DATA

use that form data to save a new review to our 
MongoDB database using our Review model
use the method provided to us by Mongoose called create()

re write:
// CREATE
app.post('/reviews', (req, res) => {
  Review.create(req.body).then((review) => {
    console.log(review);
    res.redirect('/');
  }).catch((err) => {
    console.log(err.message);
  })
})